using Eddy.Core.Validation;
using Eddy.x12.Mapping;
using Eddy.x12.Models;

namespace Eddy.Tests.x12.Models;

public class LH4Tests
{
    [Fact]
    public void Parse_ShouldReturnCorrectObject()
    {
        string x12Line = "LH4*kTe2tRPALKjB*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*gyX*CA4*ekO*K3F*cB*5*cAHViVkSoCxYOsCB9rrFPq2Q3*T*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*De*ZlF*4*zm";

        var expected = new LH4_CanadianDangerousRequirements()
        {
            EmergencyResponsePlanNumber = "kTe2tRPALKjB",
            CommunicationNumber = "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",
            PackingGroupCode = "gyX",
            SubsidiaryClassificationCode = "CA4",
            SubsidiaryClassificationCode2 = "ekO",
            SubsidiaryClassificationCode3 = "K3F",
            SubsidiaryRiskIndicatorCode = "cB",
            NetExplosiveQuantity = 5,
            CanadianHazardousNotation = "cAHViVkSoCxYOsCB9rrFPq2Q3",
            SpecialCommodityIndicatorCode = "T",
            CommunicationNumber2 = "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",
            UnitOrBasisForMeasurementCode = "De",
            HazardousMaterialShipmentInformationQualifier = "ZlF",
            Quantity = 4,
            UnitOrBasisForMeasurementCode2 = "zm",
        };

        var actual = Map.MapObject<LH4_CanadianDangerousRequirements>(x12Line, MapOptionsForTesting.x12DefaultEndsWithNewline);
        Assert.Equivalent(expected, actual);
    }
    [Theory]
    [InlineData("", "", true)]
    [InlineData("v1", "v2", true)]
    [InlineData("", "v2", false)]
    [InlineData("v1", "", false)]
    public void Validation_AllAreRequiredEmergencyResponsePlanNumber(string emergencyResponsePlanNumber, string communicationNumber, bool isValidExpected)
    {
        var subject = new LH4_CanadianDangerousRequirements();
        subject.EmergencyResponsePlanNumber = emergencyResponsePlanNumber;
        subject.CommunicationNumber = communicationNumber;

        TestHelper.CheckValidationResults(subject, isValidExpected, ErrorCodes.IfOneIsFilledAllAreRequired);
    }
    [Theory]
    [InlineData(0, "", true)]
    [InlineData(1, "v2", true)]
    [InlineData(0, "v2", false)]
    [InlineData(1, "", false)]
    public void Validation_AllAreRequiredNetExplosiveQuantity(int netExplosiveQuantity, string unitOrBasisForMeasurementCode, bool isValidExpected)
    {
        var subject = new LH4_CanadianDangerousRequirements();
        if (netExplosiveQuantity > 0)
            subject.NetExplosiveQuantity = netExplosiveQuantity;
        subject.UnitOrBasisForMeasurementCode = unitOrBasisForMeasurementCode;

        TestHelper.CheckValidationResults(subject, isValidExpected, ErrorCodes.IfOneIsFilledAllAreRequired);
    }
}
using Eddy.Core.Validation;
using Eddy.x12.Mapping;
using Eddy.x12.Models;

namespace Eddy.Tests.x12.Models;

public class PENTests
{
	[Fact]
	public void Parse_ShouldReturnCorrectObject()
	{
		string x12Line = "PEN*jp*7*wq*5*g*o*8*v*QFu";

		var expected = new PEN_PensionInformation()
		{
			TransactionTypeCode = "jp",
			MonetaryAmount = 7,
			ContributionCode = "wq",
			PercentageAsDecimal = 5,
			SpecialProcessingType = "g",
			ReferenceIdentification = "o",
			Number = 8,
			LoanTypeCode = "v",
			MaintenanceTypeCode = "QFu",
		};

		var actual = Map.MapObject<PEN_PensionInformation>(x12Line, MapOptionsForTesting.x12DefaultEndsWithNewline);
		Assert.Equivalent(expected, actual);
	}

	[Theory]
	[InlineData("", false)]
	[InlineData("jp", true)]
	public void Validation_RequiredTransactionTypeCode(string transactionTypeCode, bool isValidExpected)
	{
		var subject = new PEN_PensionInformation();
		subject.PercentageAsDecimal = 1;
		subject.TransactionTypeCode = transactionTypeCode;
		TestHelper.CheckValidationResults(subject, isValidExpected, ErrorCodes.Required);
	}

	[Theory]
	[InlineData(0,0, false)]
	[InlineData(7,5, true)]
	[InlineData(0, 5, true)]
	[InlineData(7, 0, true)]
	public void Validation_AtLeastOneMonetaryAmount(decimal monetaryAmount, decimal percentageAsDecimal, bool isValidExpected)
	{
		var subject = new PEN_PensionInformation();
		subject.TransactionTypeCode = "jp";
		if (monetaryAmount > 0)
		subject.MonetaryAmount = monetaryAmount;
		if (percentageAsDecimal > 0)
		subject.PercentageAsDecimal = percentageAsDecimal;

		TestHelper.CheckValidationResults(subject, isValidExpected, ErrorCodes.AtLeastOneIsRequired);
	}

}

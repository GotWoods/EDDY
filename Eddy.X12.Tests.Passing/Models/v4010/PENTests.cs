using Eddy.Core.Validation;
using Eddy.Tests.x12;
using Eddy.x12.Mapping;
using Eddy.x12.Models.Elements;
using Eddy.x12.Models.v4010;

namespace Eddy.x12.Tests.Models.v4010;

public class PENTests
{
	[Fact]
	public void Parse_ShouldReturnCorrectObject()
	{
		string x12Line = "PEN*HP*1*c5*3*U*D*1*W*oP9";

		var expected = new PEN_PensionInformation()
		{
			TransactionTypeCode = "HP",
			MonetaryAmount = 1,
			ContributionCode = "c5",
			Percent = 3,
			SpecialProcessingType = "U",
			ReferenceIdentification = "D",
			Number = 1,
			LoanTypeCode = "W",
			MaintenanceTypeCode = "oP9",
		};

		var actual = Map.MapObject<PEN_PensionInformation>(x12Line, MapOptionsForTesting.x12DefaultEndsWithNewline);
		Assert.Equivalent(expected, actual);
	}

	[Theory]
	[InlineData("", false)]
	[InlineData("HP", true)]
	public void Validation_RequiredTransactionTypeCode(string transactionTypeCode, bool isValidExpected)
	{
		var subject = new PEN_PensionInformation();
		//Required fields
		//Test Parameters
		subject.TransactionTypeCode = transactionTypeCode;
		//At Least one
		subject.MonetaryAmount = 1;
		TestHelper.CheckValidationResults(subject, isValidExpected, ErrorCodes.Required);
	}

	[Theory]
	[InlineData(0, 0, false)]
	[InlineData(1, 3, true)]
	[InlineData(1, 0, true)]
	[InlineData(0, 3, true)]
	public void Validation_AtLeastOneMonetaryAmount(decimal monetaryAmount, decimal percent, bool isValidExpected)
	{
		var subject = new PEN_PensionInformation();
		//Required fields
		subject.TransactionTypeCode = "HP";
		//Test Parameters
		if (monetaryAmount > 0) 
			subject.MonetaryAmount = monetaryAmount;
		if (percent > 0) 
			subject.Percent = percent;
		TestHelper.CheckValidationResults(subject, isValidExpected, ErrorCodes.AtLeastOneIsRequired);
	}

}

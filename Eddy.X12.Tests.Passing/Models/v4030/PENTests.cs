using Eddy.Core.Validation;
using Eddy.Tests.x12;
using Eddy.x12.Mapping;
using Eddy.x12.Models.Elements;
using Eddy.x12.Models.v4030;

namespace Eddy.x12.Tests.Models.v4030;

public class PENTests
{
	[Fact]
	public void Parse_ShouldReturnCorrectObject()
	{
		string x12Line = "PEN*hs*4*t6*5*G*e*9*V*kjj";

		var expected = new PEN_PensionInformation()
		{
			TransactionTypeCode = "hs",
			MonetaryAmount = 4,
			ContributionCode = "t6",
			Percent = 5,
			SpecialProcessingType = "G",
			ReferenceIdentification = "e",
			Number = 9,
			LoanTypeCode = "V",
			MaintenanceTypeCode = "kjj",
		};

		var actual = Map.MapObject<PEN_PensionInformation>(x12Line, MapOptionsForTesting.x12DefaultEndsWithNewline);
		Assert.Equivalent(expected, actual);
	}

	[Theory]
	[InlineData("", false)]
	[InlineData("hs", true)]
	public void Validation_RequiredTransactionTypeCode(string transactionTypeCode, bool isValidExpected)
	{
		var subject = new PEN_PensionInformation();
		//Required fields
		//Test Parameters
		subject.TransactionTypeCode = transactionTypeCode;
		//At Least one
		subject.MonetaryAmount = 4;
		TestHelper.CheckValidationResults(subject, isValidExpected, ErrorCodes.Required);
	}

	[Theory]
	[InlineData(0, 0, false)]
	[InlineData(4, 5, true)]
	[InlineData(4, 0, true)]
	[InlineData(0, 5, true)]
	public void Validation_AtLeastOneMonetaryAmount(decimal monetaryAmount, decimal percent, bool isValidExpected)
	{
		var subject = new PEN_PensionInformation();
		//Required fields
		subject.TransactionTypeCode = "hs";
		//Test Parameters
		if (monetaryAmount > 0) 
			subject.MonetaryAmount = monetaryAmount;
		if (percent > 0) 
			subject.Percent = percent;
		TestHelper.CheckValidationResults(subject, isValidExpected, ErrorCodes.AtLeastOneIsRequired);
	}

}
